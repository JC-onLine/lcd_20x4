#!/bin/zsh

# USB serial port for LCD display
LCD=/dev/ttyUSB0

# ======================================================
# Usage: ./lcd loop 2   #for monitoring every 2 seconds
# ======================================================


# ==== MOTHER BOARD DETECTION ====
function mother_board() {
    # motherboard name
    BOARD_NAME=$(cat /sys/devices/virtual/dmi/id/board_name)
    # profile file with sensors namespaces in json format
    BOARD_PROFILE_FILE=$(echo $BOARD_NAME".json" | tr " " "-")
    # use profile file or create a snippets for example
    if [[ -e $BOARD_PROFILE_FILE ]]; then
        echo "Profile file $BOARD_PROFILE_FILE read."
        PROFILE_FILE=$(cat $BOARD_PROFILE_FILE)
        CPU_TEMP_NAMESPACE=$(echo $PROFILE_FILE | jq ".cpu.temp_namespace")
        GPU_TEMP_NAMESPACE=$(echo $PROFILE_FILE | jq ".gpu.temp_namespace")
        GPU_FAN_NAMESPACE=$(echo $PROFILE_FILE | jq ".gpu.fan_namespace")
        echo $PROFILE_FILE
        echo $CPU_TEMP_NAMESPACE
        echo $GPU_TEMP_NAMESPACE
        echo $GPU_FAN_NAMESPACE
    else
        echo "Profile file $BOARD_PROFILE_FILE not found:"
        cat sensors-snippets.json > $BOARD_PROFILE_FILE
        echo "    Snippets was created in file $BOARD_PROFILE_FILE."
        echo "    Please, complete the sensors namespace."
        echo "    Use sensors -j to have sensors namespaces details."
    fi
}



# ==== LOW LEVEL FUNCTIONS ====
function init() {
    echo "\xA0" > $LCD
    sleep 0.5
}
function clear() {
    echo "\xA3\x01" > $LCD
}
function gotoxy() {
    echo "\xA1\x$1\x$2" > $LCD
}
function print() {
    echo "\xA2\x$1\x00" > $LCD
}
function printxy() {
    echo "\xA1\x$1\x$2" > $LCD
    echo $3 > $LCD
}
function lcdon() {
    echo "\xA5\x01" > $LCD
    echo "Display on"
}
function lcdoff() {
    echo "\xA5\x02" > $LCD
    echo "Display off"
}
function cursoron() {
    echo "\xA3\x0E" > $LCD
}
function cursoroff() {
    echo "\xA3\x0C" > $LCD
}
function ascii() {
    init
    cursoron
    echo "\x$1" > $LCD
}
function font() {
    # Define custom font for progressbar
    case $1 in
        5)
            echo "\xA4\x05\x00\x15\x00\x10\x00\x15\x00\x00" > $LCD
        ;;
        6)
            echo "\xA4\x06\x00\x15\x00\x01\x00\x15\x00\x00" > $LCD
        ;;
        7)
            echo "\xA4\x07\x00\x15\x00\x00\x00\x15\x00\x00" > $LCD
        ;;
        8)
            echo "\xA4\x08\x00\x1F\x1F\x1F\x1F\x1F\x00\x00" > $LCD
        ;;
    esac
    #~ print $1
}
function format() {
    VALUE=$1    # numeric value in int or float
    TYPE=$2        # example: int or float
    FORMAT=$3    # example: "%6.1f" used by printf
    UNIT=$4        # example: C, %, RM ...
    VALUE_DISPLAY=$(IFS=$'\n'; printf "$FORMAT%s" $SPACE $VALUE $UNIT)
    VALUE_DISPLAY=$(echo $VALUE_DISPLAY | tr "," ".")
    IFS=$'\t\n'
    echo $VALUE_DISPLAY
}
function get_sensors_json() {
    # parameters:
    SENSORS_JSON=$(sensors -j)
}
function get_jsonvalue() {
    # parameters details:
    SENSOR_NAME=$1
    # get value in str format from json sensors
    echo $(echo $SENSORS_JSON | jq $SENSOR_NAME)
}
function get_mem() {
    echo $(free | grep "Mem" | awk '{printf "%5.2f%", (100 * $3 / $2)}')
}

# ==== HIGH LEVEL FUNCTIONS ====
function init_app() {
    # init lcd
    init
    # print motherboard name
    #~ mother_board
    printxy 0 0 "Motherboard:"
    printxy 0 1 $BOARD_NAME
    # load font
    printxy 0 3 "Fonts-loading"
    for (( i=5; i<=8; i++ )); do
        font $i
        print "2E"
        sleep 0.2
    done
    sleep 5
    # display static labels 
    clear
    cursoroff
    printxy 0 0 "CPU" # X Y position & label
    printxy 0 1 "RAM"
    printxy 0 2 "GPU"
    printxy 0 3 "GPU"
}
function progressbar() {
    BAR_X=$1 # param1: X display position.
    BAR_Y=$2 # param2: Y display position.
    BAR_L=$3 # param3: progressbar length in caracters.
    VALUE=$4 # param4: Value.
    MINI=$5  # param5: Mini value.
    MAXI=$6  # param6: Maxi value.
    BAR_ON="8"
    BAR_OFF="7"
    BAR_END="6"
    BAR_BEGIN="5"
    # Scale calcul
    RANGE=$(($MAXI - $MINI))
    SCALE=$(( ($BAR_L * ($MAXI - $VALUE)) / $RANGE ))
    CAR_NB=$(( $BAR_L - SCALE - 1 ))
    # Progressbar trace
    gotoxy $BAR_X $BAR_Y
    for (( i=1; i<=$BAR_L; i++ )); do
        # Active trace
        if [ $i -le $CAR_NB ]; then
            BAR="$BAR_ON"
        # Inactive trace
        else
            if [ $i -eq 1 ] && [ $CAR_NB -le 0 ]; then
                BAR="$BAR_BEGIN"
            elif [ $i -ne $BAR_L ]; then
                BAR="$BAR_OFF"
            else
                BAR="$BAR_END"
            fi
        fi
        #~ printf "\xA2\x%d\x00" $BAR > $LCD
        print $BAR
        #~ echo "\xA2\x$BAR\x00" > $LCD
    done    
}
function cputemp() {
    # parameters details:
    X_VAL=$1
    Y_VAL=$2
    VALUE_STR=$3
    # settings details:
    X_BAR=C
    BAR_SIZE=8
    MINI=30
    MAXI=80
    # formating
    VALUE_FLOAT=$(echo $VALUE_STR | tr "." ",")
    VALUE_INT=$(printf "%.0f" $VALUE_FLOAT)
    VALUE_DISPLAY=$(format $VALUE_FLOAT "float" "%5.1f" "C")
    # display
    printxy $X_VAL $Y_VAL $VALUE_DISPLAY
    progressbar $X_BAR $Y_VAL $BAR_SIZE $VALUE_INT $MINI $MAXI
}
function ram100() {
    # parameters details:
    X_VAL=$1
    Y_VAL=$2
    VALUE_STR=$3
    # settings details:
    X_BAR=C
    BAR_SIZE=8
    MINI=0
    MAXI=100
    # Percent RAM calcul
    VALUE_FLOAT=$(echo $VALUE_STR | tr -d "%")
    VALUE_FLOAT=$(echo $VALUE_FLOAT | tr "." ",")
    VALUE_INT=$(printf "%.0f" $VALUE_FLOAT)
    VALUE_DISPLAY=$(format $VALUE_FLOAT "float" "%5.1f" "%")
    # Display RAM & progressbar
    printxy $X_VAL $Y_VAL $VALUE_DISPLAY
    progressbar $X_BAR $Y_VAL $BAR_SIZE $VALUE_INT $MINI $MAXI
}
function gputemp() {
    # parameters details:
    X_VAL=$1
    Y_VAL=$2
    VALUE_STR=$3
    # settings details:
    X_BAR=C
    BAR_SIZE=8
    MINI=0
    MAXI=100
    # formating
    VALUE_FLOAT=$(echo $VALUE_STR | tr -d "+Â°C")
    VALUE_FLOAT=$(echo $VALUE_FLOAT | tr "." ",")
    VALUE_INT=$(printf "%.0f" $VALUE_FLOAT)
    VALUE_DISPLAY=$(format $VALUE_FLOAT "float" "%5.1f" "%")
    # Display RAM & progressbar
    printxy $X_VAL $Y_VAL $VALUE_DISPLAY
    progressbar $X_BAR $Y_VAL $BAR_SIZE $VALUE_INT $MINI $MAXI
}
function cpufan() {
    if   [[ $(sensors | grep -E "^(fan1)") ]]; then
        sensors | grep -E "^(fan1)" | awk '{print $2 " RM "}'  > $LCD
    fi
}
function gpufan() {
    # parameters details:
    X_VAL=$1
    Y_VAL=$2
    VALUE_STR=$3
    # settings details:
    X_BAR=C
    BAR_SIZE=8
    MINI=0
    MAXI=3200
    #~ VALUE_STR=$(echo $SENSORS_JSON | jq $SENSOR_VALUE)    
    # formating
    VALUE_FLOAT=$(echo $VALUE_STR | tr -d "RM")
    VALUE_INT=$(printf "%.0f" $VALUE_FLOAT)
    VALUE_DISPLAY=$(format $VALUE_FLOAT "float" "%4.0f" "RM")
    # Display RAM & progressbar
    printxy $X_VAL $Y_VAL $VALUE_DISPLAY
    progressbar $X_BAR $Y_VAL $BAR_SIZE $VALUE_INT $MINI $MAXI
}
function disk() {
    df -h | grep -E "/home" | awk 
}
function uptime() {
    uptime -s | awk "{print $2}" > $LCD
    # uptime -s > $LCD
}
function loop() {
    # first parameter number control 
    if [[ $1 =~ [0-9]+ ]]; then
        # init display, print motherboard name, load font, print static label
        init_app
        while [[ 1 ]]; do
            # read sensors
            get_sensors_json
            # display data line by line on LCD
            # X Y position in LCD display, sensor namespace
            cputemp 4 0 $(get_jsonvalue '."k10temp-pci-00c3".Tctl.temp1_input')
            ram100  4 1 $(get_mem)
            gputemp 4 2 $(get_jsonvalue '."amdgpu-pci-0900".edge.temp1_input')
            gpufan  4 3 $(get_jsonvalue '."amdgpu-pci-0900".fan1.fan1_input')
            sleep $1
        done
    else
        echo "Utilisation: lcd loop [frequency in second]"
  fi
}

#main
if [[ -e $LCD ]]; then
    case $1 in
        off)
            lcdoff
        ;;
        on)
            lcdon
        ;;
        init)
            init
            cursoroff
        ;;
        cls | clear)
            clear
            cursoroff
        ;;
        xy)
            gotoxy $2 $3
            if   [[ $4 == "cputemp" ]]; then
                cputemp $4 $5
            elif [[ $4 == "ram100" ]]; then
                ram100 $4 $5
            elif [[ $4 == "gputemp" ]]; then
                gputemp $4 $5
            elif [[ $4 == "gpufan" ]]; then
                gpufan $4 $5
            fi
        ;;
        print)
          print $2
        ;;
        printxy)
          printxy $2 $3 $4
        ;;
        cursoroff)
            cursoroff
        ;;
        cursoron)
            cursoron
        ;;
        ascii)
            ascii $2
        ;;
        font)
            font $2
        ;;
        uptime)
          uptime
        ;;
        cputemp)
            cputemp $2 $3
        ;;
        ram100)
            ram100 $2 $3
        ;;
        gputemp)
            gputemp $2 $3
        ;;
        gpufan)
            gpufan $2 $3
        ;;
        progressbar)
          progressbar $2 $3 $4 $5 $6 $7
        ;;
        loop)
          loop $2
        ;;
    esac
else
    echo "Display $LCD not found"
fi
