#!/usr/bin/zsh
LCD=/dev/ttyUSB0
GLOBAL_BAR_ON="="
GLOBAL_BAR_OFF="-"

function init() {
	echo "\xA0" > $LCD
}
function gotoxy() {
	echo "\xA1\x$1\x$2" > $LCD
}
#function print() {
#	echo $1 > $LCD
#}
function printxy() {
	echo "\xA1\x$1\x$2" > $LCD
	echo $3 > $LCD
}
function lcdon() {
	echo "\xA5\x01" > $LCD
	echo "Display on"
}
function lcdoff() {
	echo "\xA5\x02" > $LCD
	echo "Display off"
}
function pgbar() {
	# param1: X display position.
	# param2: Y display position.
	# param3: bar lengt in caracters.
	# param4: Value in %.
	X=$1
	Y=$2
	BAR_SIZE=$3
	BAR_ON=$4
	BAR_OFF=$5
	VALUE=$6
	gotoxy $X $Y
	SCALE=$((($BAR_SIZE * $VALUE) / 100))
	echo "Result: " $SCALE
	for (( i=1; i<=$BAR_SIZE; i++ )); do
		if [ $i -le $SCALE ]; then
			echo -ne $BAR_ON > $LCD
		else
			echo -ne $BAR_OFF > $LCD
		fi
	done	
	#echo "" > $LCD
}
function cputemp() {
	X_VAL=4
	Y_VAL=0
	X_BAR=11
	BAR_SIZE=8
	gotoxy $X_VAL $Y_VAL
	if   [[ $(sensors | grep -E "^(Core 0)") ]]; then
		VALUE=$(sensors | grep -E "^(Core 0)" | awk '{print $3}')
		echo $VALUE  > $LCD
#		pgbar $X_BAR Y_VAL $BAR_SIZE $GLOBAL_BAR_ON $GLOBAL_BAR_OFF $VALUE
	elif [[ $(sensors | grep -E "^(Tctl)") ]]; then
		VALUE=$(sensors | grep -E "^(Tctl)" | awk '{print $2}') > $LCD
		echo $VALUE  > $LCD
#		pgbar $X_BAR Y_VAL $BAR_SIZE $GLOBAL_BAR_ON $GLOBAL_BAR_OFF $VALUE
	fi
}
function gputemp() {
	X_VAL=4
	Y_VAL=2
	X_BAR=11
	BAR_SIZE=8
	gotoxy $X_VAL $Y_VAL
	if   [[ $(sensors | grep -E "^(Core 0)") ]]; then
		VALUE=$(sensors | grep -E "^(Core 0)" | awk '{print $3}')
		echo $VALUE  > $LCD
#		pgbar $X_BAR Y_VAL $BAR_SIZE $GLOBAL_BAR_ON $GLOBAL_BAR_OFF $VALUE
	elif [[ $(sensors | grep -E "^(edge)") ]]; then
		VALUE=$(sensors | grep -E "^(edge)" | awk '{print $2}') > $LCD
		echo $VALUE  > $LCD
#		pgbar $X_BAR Y_VAL $BAR_SIZE $GLOBAL_BAR_ON $GLOBAL_BAR_OFF $VALUE
	fi
}
function cpufan() {
	if   [[ $(sensors | grep -E "^(fan1)") ]]; then
		sensors | grep -E "^(fan1)" | awk '{print $2 " RM "}'  > $LCD
	fi
}
function gpufan() {
	if   [[ $(sensors | grep -E "^(fan1)") ]]; then
		sensors | grep -E "^(fan1)" | awk '{print $2 " RM "}'  > $LCD
	fi
}
function disk() {
	df -h | grep -E "/home" | awk 
}
function uptime() {
	uptime -s | awk "{print $2}" > $LCD
	# uptime -s > $LCD
}
function cursoron() {
	echo "\xA3\x0E" > $LCD
}
function cursoroff() {
	echo "\xA3\x0C" > $LCD
}
function degre() {
	echo "\xDF" > $LCD
}
function ram100() {
	free | grep "Mem" | awk '{printf "%5.2f%", (100 * $3 / $2)}' > $LCD
}
function loop() {
	if [[ $1 =~ [0-9]+ ]]; then
		./lcd clear
		./lcd printxy 0 0 "CPU"
		./lcd printxy 0 1 "RAM"
		./lcd printxy 0 2 "GPU"
		./lcd printxy 0 3 "GPU"
		#~ ./lcd printxy 8 2 "RPM"
		while [[ 1 ]]; do
			./lcd cputemp
			./lcd xy 4 1 ram100
			./lcd xy 4 2 gputemp
			./lcd xy 4 3 gpufan
			sleep $1
		done
	else
		echo "Utilisation : lcd loop [frequency in second]"
  fi
}

#main
if [[ -e $LCD ]]; then
	case $1 in
		off)
			lcdoff
		;;
		on)
			lcdon
		;;
		cls | clear)
			init
			cursoroff
		;;
		xy)
			gotoxy $2 $3
			if   [[ $4 == "temp" ]]; then
				temp
			elif [[ $4 == "ram100" ]]; then
				ram100
			elif [[ $4 == "gputemp" ]]; then
				gputemp
			elif [[ $4 == "gpufan" ]]; then
				gpufan
			fi
		;;
		print)
		  print $2
		;;
		printxy)
		  printxy $2 $3 $4
		;;
		cputemp)
			cputemp
		;;
		cursoroff)
			cursoroff
		;;
		cursoron)
			cursoron
		;;
		uptime)
		  uptime
		;;
		ram100)
			ram100
		;;
		loop)
		  loop $2
		;;
		pgbar)
		  pgbar $1 $2 $3 $4 $5 $6
		;;
	esac
else
	echo "Display $LCD not found"
fi
