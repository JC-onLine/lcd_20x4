#!/bin/zsh

# USB serial port for LCD display
LCD=/dev/ttyUSB0
LOG_FILE=lcd.log
#~ echo "=== START APP ===" > $LOG_FILE

# ======================================================
# Usage: ./lcd loop 2   #for monitoring every 2 seconds
# ======================================================


# ==== MOTHER BOARD DETECTION ====
function mother_board() {
    # Get motherboard name
    BOARD_NAME=$(cat /sys/devices/virtual/dmi/id/board_name)
    # Compose profile file name
    BOARD_PROFILE_CONTENT_NAME=$(echo $BOARD_NAME".json" | tr " " "-")
    # use profile file or create a snippets for example
    if [[ -e $BOARD_PROFILE_CONTENT_NAME ]]; then
        # Get profile
        PROFILE_CONTENT=$(cat $BOARD_PROFILE_CONTENT_NAME)
        # get data max number
        PROFILE_DATA_MAX=$(echo $PROFILE_CONTENT | jq ".data_max")
        echo "lcd: Profile file $BOARD_PROFILE_CONTENT_NAME readed ($PROFILE_DATA_MAX data max)."
        # Note: need to use double 'tr' to inverse ["] and [']
        #       json data file need to begin and end with ["]
        #       'sensors' cli use [-] in namespace, so we must escape [-] with ["]
        # In json file: ".'k10temp-pci-00c3'.Tctl.temp1_input"
        # What jq use :  ."k10temp-pci-00c3".Tctl.temp1_input
        # 1st step: delete ["]
        # 2nd step: replace ['] by ["]
    else
        echo "lcd: Profile file $BOARD_PROFILE_CONTENT_NAME not found:"
        cat sensors-snippets.json > $BOARD_PROFILE_CONTENT_NAME
        echo "    Snippets was created in file $BOARD_PROFILE_CONTENT_NAME."
        echo "    Please, complete the sensors namespace."
        echo "    Use sensors -j to have sensors namespaces details."
        echo "Press Ctrl+C to stop the script."
    fi
}


# ==== LOW LEVEL FUNCTIONS ====
function init_lcd() {
    echo "\xA0" > $LCD
    sleep 0.5
}
function clear() {
    echo "\xA3\x01" > $LCD
}
function gotoxy() {
    echo "\xA1\x$1\x$2" > $LCD
}
function print() {
    echo "\xA2\x$1\x00" > $LCD
}
function printxy() {
    echo "\xA1\x$1\x$2" > $LCD
    echo $3 > $LCD
}
function lcdon() {
    echo "\xA5\x01" > $LCD
    echo "Display on"
}
function lcdoff() {
    echo "\xA5\x02" > $LCD
    echo "Display off"
}
function cursoron() {
    echo "\xA3\x0E" > $LCD
}
function cursoroff() {
    echo "\xA3\x0C" > $LCD
}
function ascii() {
    init_lcd
    cursoron
    echo "\x$1" > $LCD
}
function font() {
    # Define custom font for progressbar
    case $1 in
        5)
            echo "\xA4\x05\x00\x15\x00\x10\x00\x15\x00\x00" > $LCD
        ;;
        6)
            echo "\xA4\x06\x00\x15\x00\x01\x00\x15\x00\x00" > $LCD
        ;;
        7)
            echo "\xA4\x07\x00\x15\x00\x00\x00\x15\x00\x00" > $LCD
        ;;
        8)
            echo "\xA4\x08\x00\x1F\x1F\x1F\x1F\x1F\x00\x00" > $LCD
        ;;
    esac
}
function format() {
    VALUE=$1    # numeric value in int or float
    FORMAT=$2   # example: "%6.1f" used by printf
    UNIT=$3     # example: C, %, RM ...
    VALUE_DISPLAY=$(IFS=$'\n'; printf "$FORMAT%s" $SPACE $VALUE $UNIT)
    VALUE_DISPLAY=$(echo $VALUE_DISPLAY | tr "," ".")
    IFS=$'\t\n'
    echo $VALUE_DISPLAY
}
function Set_cache_sensors_json() {
    # parameters:
    CACHE_SENSORS_JSON=$(sensors -j 2>/dev/null)
}
function get_profile() {
    # parameters details:
    PROFILE_NAMESPACE=$1
    VALUE=0
    # get value in str format from json profile file
    if [[ $PROFILE_NAMESPACE == *"namespace"* ]] ; then
	    #~ get sensor namespace in current profile
        NS_BRUT=$(echo $PROFILE_CONTENT | jq $PROFILE_NAMESPACE)
        # sensors_namespace adaptation: delete double quote, replace single cote and double cote
        VALUE=$(echo $NS_BRUT | tr -d '"' | tr "'" '"')
    else
        VALUE=$(echo $PROFILE_CONTENT | jq $PROFILE_NAMESPACE | tr -d '"')
    fi
    echo $VALUE
}
function get_cache_sensor() {
    # parameters details:
    SENSOR_NAMESPACE=$1
    VALUE=0.1
    # get value in str format from json sensors cache
    VALUE=$(echo $CACHE_SENSORS_JSON | jq $SENSOR_NAMESPACE)
    echo $VALUE
}
function get_mem() {
    # return % memory used
    echo $(free | grep "Mem" | awk '{printf "%5.2f", (100 * $3 / $2)}')
}


        declare -A DATA1
# ==== HIGH LEVEL FUNCTIONS ====
function get_settings() {
    # 4 array of hash to get json profile settings in variables images
    IDX=1
    #~ for IDX in $( seq 1 4 ); do
        DATA1=( \
            [DATA_X]=$(get_profile ".data$IDX.data_x") \
            [DATA_Y]=$(get_profile ".data$IDX.data_y") \
            [DATA_FORMAT]=$(get_profile ".data$IDX.data_format") \
            [DATA_UNIT]=$(get_profile ".data$IDX.data_unit") \
            [DATA_METHOD]=$(get_profile ".data$IDX.data_method") \
            [BAR_X]=$(get_profile ".data$IDX.bargraph_x") \
            [BAR_SIZE]=$(get_profile ".data$IDX.bargraph_size") \
            [BAR_MINI]=$(get_profile ".data$IDX.bargraph_mini") \
            [BAR_MAXI]=$(get_profile ".data$IDX.bargraph_maxi"))
    #~ done
}
function echo_settings() {
    # 4 array of hash to get json profile settings in variables images
    IDX=1
    #~ for IDX in $( seq 1 4 ); do
        #~ echo ${DATA1[DATA_X]}
        #~ echo ${DATA1[DATA_Y]}
        #~ echo ${DATA1[DATA_FORMAT]}
        #~ echo ${DATA1[DATA_UNIT]}
        #~ echo ${DATA1[DATA_METHOD]}
        #~ echo ${DATA1[BAR_X]}
        #~ echo ${DATA1[BAR_SIZE]}
        #~ echo ${DATA1[BAR_MINI]}
        #~ echo ${DATA1[BAR_MAXI]}
    #~ done
    for DATA in "${!DATA1[@]}"
    do
      echo "Setting of $DATA is ${DATA1[$DATA]}"
    done
}
function init_app() {
    # get json profile settings
    #~ get_settings
    #~ echo_settings
    # init lcd
    init_lcd
    # print motherboard name
    mother_board
    # uncomment for test only: print get_mem value on app startup
    #~ echo $($(echo $PROFILE_CONTENT | jq ".data2.data_method" | tr -d '"'))
    printxy 0 0 "Motherboard:"
    printxy 0 1 $BOARD_NAME
    # load font
    printxy 0 3 "Fonts-loading "
    for (( i=5; i<=8; i++ )); do
        font $i
        print "2E"
        sleep 0.1
    done
    echo "lcd: Fonts loaded."
    sleep 1

	#~ echo $($(get_profile ".data1.cde"))

    # display static labels
    clear
    cursoroff
    print_labels
    echo "lcd: Labels displayed."
}
function progressbar() {
    BAR_X=$1 # param1: X display position.
    BAR_Y=$2 # param2: Y display position.
    BAR_L=$3 # param3: progressbar length in caracters.
    VALUE=$4 # param4: Value.
    MINI=$5  # param5: Mini value.
    MAXI=$6  # param6: Maxi value.
    BAR_ON="8"
    BAR_OFF="7"
    BAR_END="6"
    BAR_BEGIN="5"
    # Scale calcul
    RANGE=$(($MAXI - $MINI))
    SCALE=$(( ($BAR_L * ($MAXI - $VALUE)) / $RANGE ))
    CAR_NB=$(( $BAR_L - SCALE - 1 ))
    # Progressbar trace
    gotoxy $BAR_X $BAR_Y
    for (( i=1; i<=$BAR_L; i++ )); do
        # Active trace
        if [ $i -le $CAR_NB ]; then
            BAR="$BAR_ON"
        # Inactive trace
        else
            if [ $i -eq 1 ] && [ $CAR_NB -le 0 ]; then
                BAR="$BAR_BEGIN"
            elif [ $i -ne $BAR_L ]; then
                BAR="$BAR_OFF"
            else
                BAR="$BAR_END"
            fi
        fi
        print $BAR
        #~ echo "\xA2\x$BAR\x00" > $LCD
    done
}
function print_labels() {
    echo "lcd: data.enable check:"
    # print label if data enable
    for IDX in $(seq 1 $PROFILE_DATA_MAX) ; do
        # data enable ?
        ENABLE=$(get_profile ".data$IDX.enable")
        # get X Y position & print label if data enable
        if [ $ENABLE -eq 1 ]; then
            printxy $(get_profile ".data$IDX.label_x") $(get_profile ".data$IDX.label_y") $(get_profile ".data$IDX.label")
        fi
        echo "\tData$IDX.enable=$ENABLE"
    done
}
function print_data() {
    # display data line by line on LCD
    for IDX in $( seq 1 $PROFILE_DATA_MAX ) ; do
        # data enable ?
        ENABLE=$(get_profile ".data$IDX.enable")
        if [ $ENABLE -eq 1 ]; then
            # settings details:
            DATA_X=$(get_profile ".data$IDX.data_x")
            DATA_Y=$(get_profile ".data$IDX.data_y")
            DATA_FORMAT=$(get_profile ".data$IDX.data_format")
            DATA_UNIT=$(get_profile ".data$IDX.data_unit")
            DATA_METHOD=$(get_profile ".data$IDX.data_method")
            BAR_X=$(get_profile ".data$IDX.bargraph_x")
            BAR_SIZE=$(get_profile ".data$IDX.bargraph_size")
            BAR_MINI=$(get_profile ".data$IDX.bargraph_mini")
            BAR_MAXI=$(get_profile ".data$IDX.bargraph_maxi")
            # get data from sensors or system
            DATA_STR="0.1"
            # this commented code is a test tu use fonction directly from json file settings:
            # - it's running without paremeter, ex: get_mem
            # - it's fail with parameter, ex: get_cache_sensor ."amdgpu-pci-0900".edge.temp1_input
            #~ DATA_STR=echo $($(echo $PROFILE_CONTENT | jq ".data$IDX.get_data_function" | tr -d '"'))
            #~ DATA_FUNC=$(get_profile ".data$IDX.get_data_function")
            #~ echo "print_line:214 DATA_FUNC="$DATA_FUNC
            #~ DATA_STR=$($DATA_FUNC)
            #~ echo "print_line:216 DATA_STR="$DATA_STR
            # data_method:
            case $(get_profile ".data$IDX.data_method") in
                sensors)
                    DATA_STR=$(get_cache_sensor "$(get_profile ".data$IDX.sensors_namespace")")
                ;;
                get_mem)
                    DATA_STR=$(get_mem)
                ;;
            esac
            # formating
            # switch . by , decimal for printf compatibility
            DATA_FLOAT=$(echo $DATA_STR | tr "." ",")
            # convert to integer (without decimal)
            DATA_INT=$(printf "%.0f" $DATA_FLOAT)
            DATA_DISPLAY=$(format $DATA_FLOAT $DATA_FORMAT $DATA_UNIT)
            # display
            printxy $DATA_X $DATA_Y $DATA_DISPLAY
            progressbar $BAR_X $DATA_Y $BAR_SIZE $DATA_INT $BAR_MINI $BAR_MAXI
        fi
    done
}
function cputemp() {
    # parameters details:
    X_VAL=$1
    Y_VAL=$2
    VALUE_STR=$3
    # settings details:
    X_BAR=C
    BAR_SIZE=8
    MINI=30
    MAXI=80
    # formating
    VALUE_FLOAT=$(echo $VALUE_STR | tr "." ",")
    VALUE_INT=$(printf "%.0f" $VALUE_FLOAT)
    VALUE_DISPLAY=$(format $VALUE_FLOAT "%5.1f" "C")
    # display
    printxy $X_VAL $Y_VAL $VALUE_DISPLAY
    progressbar $X_BAR $Y_VAL $BAR_SIZE $VALUE_INT $MINI $MAXI
}
function ram100() {
    # parameters details:
    X_VAL=$1
    Y_VAL=$2
    VALUE_STR=$3
    # settings details:
    X_BAR=C
    BAR_SIZE=8
    MINI=0
    MAXI=100
    # Percent RAM calcul
    VALUE_FLOAT=$(echo $VALUE_STR | tr -d "%")
    VALUE_FLOAT=$(echo $VALUE_FLOAT | tr "." ",")
    VALUE_INT=$(printf "%.0f" $VALUE_FLOAT)
    VALUE_DISPLAY=$(format $VALUE_FLOAT "%5.1f" "%")
    # Display RAM & progressbar
    printxy $X_VAL $Y_VAL $VALUE_DISPLAY
    progressbar $X_BAR $Y_VAL $BAR_SIZE $VALUE_INT $MINI $MAXI
}
function gputemp() {
    # parameters details:
    X_VAL=$1
    Y_VAL=$2
    VALUE_STR=$3
    # settings details:
    X_BAR=C
    BAR_SIZE=8
    MINI=30
    MAXI=80
    # formating
    VALUE_FLOAT=$(echo $VALUE_STR | tr -d "+°C")
    VALUE_FLOAT=$(echo $VALUE_FLOAT | tr "." ",")
    VALUE_INT=$(printf "%.0f" $VALUE_FLOAT)
    VALUE_DISPLAY=$(format $VALUE_FLOAT "%5.1f" "C")
    # Display RAM & progressbar
    printxy $X_VAL $Y_VAL $VALUE_DISPLAY
    progressbar $X_BAR $Y_VAL $BAR_SIZE $VALUE_INT $MINI $MAXI
}
function cpufan() {
    if   [[ $(sensors | grep -E "^(fan1)") ]]; then
        sensors | grep -E "^(fan1)" | awk '{print $2 " RM "}'  > $LCD
    fi
}
function gpufan() {
    # parameters details:
    X_VAL=$1
    Y_VAL=$2
    VALUE_STR=$3
    # settings details:
    X_BAR=C
    BAR_SIZE=8
    MINI=0
    MAXI=3200
    # formating
    VALUE_FLOAT=$(echo $VALUE_STR | tr -d "RM")
    VALUE_INT=$(printf "%.0f" $VALUE_FLOAT)
    VALUE_DISPLAY=$(format $VALUE_FLOAT "%4.0f" "RM")
    # Display RAM & progressbar
    printxy $X_VAL $Y_VAL $VALUE_DISPLAY
    progressbar $X_BAR $Y_VAL $BAR_SIZE $VALUE_INT $MINI $MAXI
}
function disk() {
    df -h | grep -E "/home" | awk
}
function uptime() {
    uptime -s | awk "{print $2}" > $LCD
    # uptime -s > $LCD
}
function loop() {
    # first parameter number control
    if [[ $1 =~ [0-9]+ ]]; then
        # init display, print motherboard name, load font, print static label
        init_app
        echo "lcd: Monitoring is displaying."
        while [[ 1 ]]; do
            # read sensors
            Set_cache_sensors_json
            # display data line by line on LCD
            print_data
            sleep $1
        done
    else
        echo "usage: lcd loop [frequency in second]"
  fi
}

# main
# lcd pluged on USB control
if [[ -e $LCD ]]; then
    case $1 in
        off)
            lcdoff
        ;;
        on)
            lcdon
        ;;
        init)
            init_lcd
            cursoroff
        ;;
        cls | clear)
            clear
            cursoroff
        ;;
        print)
          print $2
        ;;
        printxy)
          printxy $2 $3 $4
        ;;
        cursoroff)
            cursoroff
        ;;
        cursoron)
            cursoron
        ;;
        ascii)
            ascii $2
        ;;
        font)
            font $2
        ;;
        uptime)
          uptime
        ;;
        progressbar)
          progressbar $2 $3 $4 $5 $6 $7
        ;;
        loop)
          loop $2
        ;;
    esac
else
    echo "Display $LCD not found"
fi
